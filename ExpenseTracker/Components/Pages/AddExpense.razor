@page "/expenses/new"
@rendermode InteractiveServer
@using ExpenseTracker.Services
@inject ExpenseService ExpenseService
@inject CategoryService CategoryService
@inject NavigationManager Navigation

<h3>Add New Expense</h3>

<EditForm Model="newExpense" OnValidSubmit="HandleValidSubmit" FormName="addExpenseForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="title" class="form-label">Title</label>
        <InputText id="title" class="form-control" @bind-Value="newExpense.Title" />
        <ValidationMessage For="@(() => newExpense.Title)" />
    </div>

    <div class="mb-3">
        <label for="date" class="form-label">Date</label>
        <InputDate id="date" class="form-control" @bind-Value="newExpense.Date" />
        <ValidationMessage For="@(() => newExpense.Date)" />
    </div>

    <div class="mb-3">
        <label for="amount" class="form-label">Amount</label>
        <InputNumber id="amount" class="form-control" @bind-Value="newExpense.Amount" />
        <ValidationMessage For="@(() => newExpense.Amount)" />
    </div>

    <div class="mb-3 form-check">
        <InputCheckbox id="planned" class="form-check-input" @bind-Value="newExpense.Planned" />
        <label for="planned" class="form-check-label">Planned</label>
    </div>

    <div class="mb-3">
        <label for="category" class="form-label">Category</label>
        <InputSelect id="category" class="form-control" @bind-Value="newExpense.CategoryId">
            <option value="">Select a category</option>
            @foreach (var category in categories)
            {
                <option value="@category.Id">@category.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => newExpense.CategoryId)" />
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@code {
    private Expense newExpense = new Expense();
    private List<Category> categories = new List<Category>();

    protected override async Task OnInitializedAsync()
    {
        categories = (await CategoryService.GetCategoriesAsync()).ToList();
    }

    private async Task HandleValidSubmit()
    {
        await ExpenseService.AddExpenseAsync(newExpense);
        Navigation.NavigateTo("/expenses");
    }
}
