@page "/incomes"
@using ExpenseTracker.Services
@rendermode InteractiveServer

@inject IncomeService IncomeService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Incomes</h3>

<button class="btn btn-primary mb-3" @onclick="NavigateToAddIncome">Add Income</button>

@if (incomes == null)
{
    <p><em>Loading...</em></p>
}
else if (!incomes.Any())
{
    <p>No incomes available.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Date</th>
                <th>Amount</th>
                <th>Type</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var income in incomes)
            {
                <tr>
                    <td>@income.Title</td>
                    <td>@income.Date.ToString("yyyy-MM-dd")</td>
                    <td>@income.Amount</td>
                    <td>@income.Type</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => EditIncome(income.Id)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDeleteIncome(income.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Income> incomes;

    protected override async Task OnInitializedAsync()
    {
        incomes = (await IncomeService.GetAllIncomesAsync()).ToList();
    }

    private void NavigateToAddIncome()
    {
        Navigation.NavigateTo("/incomes/new");
    }

    private void EditIncome(int incomeId)
    {
        Navigation.NavigateTo($"/incomes/edit/{incomeId}");
    }

    private async Task ConfirmDeleteIncome(int incomeId)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this category?");
        if (confirmed)
        {
            await DeleteIncome(incomeId);
        }
    }

    private async Task DeleteIncome(int incomeId)
    {
        await IncomeService.DeleteIncomeAsync(incomeId);
        incomes = (await IncomeService.GetAllIncomesAsync()).ToList(); 
    }
}
