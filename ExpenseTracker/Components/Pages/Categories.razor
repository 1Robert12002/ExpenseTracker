@page "/categories"
@rendermode InteractiveServer

@using ExpenseTracker.Data.Models
@using ExpenseTracker.Services
@inject NavigationManager Navigation
@inject CategoryService CategoryService
@inject IJSRuntime JS

<PageTitle>Categories</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-6 offset-md-3">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h3>Categories</h3>
                </div>
                <div class="card-body">
                    @if (categories == null)
                    {
                        <p><em>Loading...</em></p>
                    }
                    else if (!categories.Any())
                    {
                        <p>No categories available.</p>
                    }
                    else
                    {
                        <ul class="list-group mb-3">
                            @foreach (var category in categories)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <a href="javascript:void(0)" @onclick="() => NavigateToCategory(category.Id)">
                                        @category.Name
                                    </a>
                                    <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDeleteCategory(category.Id)">Delete</button>
                                </li>
                            }
                        </ul>
                    }
                </div>
                <div class="card-footer">
                    <h4>Add New Category</h4>
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" @bind="newCategoryName" placeholder="Category Name" />
                        <button class="animated-button" @onclick="AddCategory">
                            <svg viewBox="0 0 24 24" class="arr-2" xmlns="http://www.w3.org/2000/svg">
                                <path d="M16.1716 10.9999L10.8076 5.63589L12.2218 4.22168L20 11.9999L12.2218 19.778L10.8076 18.3638L16.1716 12.9999H4V10.9999H16.1716Z"></path>
                            </svg>
                            <span class="text">Add</span>
                            <span class="circle"></span>
                            <svg viewBox="0 0 24 24" class="arr-1" xmlns="http://www.w3.org/2000/svg">
                                <path d="M16.1716 10.9999L10.8076 5.63589L12.2218 4.22168L20 11.9999L12.2218 19.778L10.8076 18.3638L16.1716 12.9999H4V10.9999H16.1716Z"></path>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>





<style>


    .animated-button {
    position: relative;
    display: flex;
    align-items: center;
    gap: 4px;
    padding: 16px 36px;
    border: 4px solid;
    border-color: transparent;
    font-size: 16px;
    background-color: inherit;
    border-radius: 100px;
    font-weight: 600;
    color: greenyellow;
    box-shadow: 0 0 0 2px greenyellow;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.6s cubic-bezier(0.23, 1, 0.32, 1);
    }

    .animated-button svg {
    position: absolute;
    width: 24px;
    fill: greenyellow;
    z-index: 9;
    transition: all 0.8s cubic-bezier(0.23, 1, 0.32, 1);
    }

    .animated-button .arr-1 {
    right: 16px;
    }

    .animated-button .arr-2 {
    left: -25%;
    }

    .animated-button .circle {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 20px;
    height: 20px;
    background-color: greenyellow;
    border-radius: 50%;
    opacity: 0;
    transition: all 0.8s cubic-bezier(0.23, 1, 0.32, 1);
    }

    .animated-button .text {
    position: relative;
    z-index: 1;
    transform: translateX(-12px);
    transition: all 0.8s cubic-bezier(0.23, 1, 0.32, 1);
    }

    .animated-button:hover {
    box-shadow: 0 0 0 12px transparent;
    color: #212121;
    border-radius: 12px;
    }

    .animated-button:hover .arr-1 {
    right: -25%;
    }

    .animated-button:hover .arr-2 {
    left: 16px;
    }

    .animated-button:hover .text {
    transform: translateX(12px);
    }

    .animated-button:hover svg {
    fill: #212121;
    }

    .animated-button:active {
    scale: 0.95;
    box-shadow: 0 0 0 4px greenyellow;
    }

    .animated-button:hover .circle {
    width: 220px;
    height: 220px;
    opacity: 1;
    }

</style>

@code {
    private List<Category>? categories;
    private string newCategoryName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            categories = await CategoryService.GetCategoriesAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading categories: {ex.Message}");
        }
    }

    private async Task AddCategory()
    {
        if (!string.IsNullOrWhiteSpace(newCategoryName))
        {
            try
            {
                var newCategory = new Category { Name = newCategoryName };
                await CategoryService.AddCategoryAsync(newCategory);
                categories?.Add(newCategory);
                newCategoryName = string.Empty;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error adding category: {ex.Message}");
            }
        }
    }

    private async Task ConfirmDeleteCategory(int id)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this category?");
        if (confirmed)
        {
            try
            {
                await CategoryService.DeleteCategoryAsync(id);
                var category = categories?.FirstOrDefault(c => c.Id == id);
                if (category != null)
                {
                    categories.Remove(category);
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error deleting category: {ex.Message}");
            }
        }
    }
    private void NavigateToCategory(int categoryId)
    {
        Navigation.NavigateTo($"/expenses/category/{categoryId}");
    }
}
