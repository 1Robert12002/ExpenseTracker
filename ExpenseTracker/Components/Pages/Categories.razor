@page "/categories"
@rendermode InteractiveServer

@using ExpenseTracker.Data.Models
@using ExpenseTracker.Services
@inject CategoryService CategoryService
@inject IJSRuntime JS

<PageTitle>Categories</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-6 offset-md-3">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h3>Categories</h3>
                </div>
                <div class="card-body">
                    @if (categories == null)
                    {
                        <p><em>Loading...</em></p>
                    }
                    else if (!categories.Any())
                    {
                        <p>No categories available.</p>
                    }
                    else
                    {
                        <ul class="list-group mb-3">
                            @foreach (var category in categories)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    @category.Name
                                    <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDeleteCategory(category.Id)">Delete</button>
                                </li>
                            }
                        </ul>
                    }
                </div>
                <div class="card-footer">
                    <h4>Add New Category</h4>
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" @bind="newCategoryName" placeholder="Category Name" />
                        <button class="btn btn-primary" @onclick="AddCategory">Add</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Category>? categories;
    private string newCategoryName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            categories = await CategoryService.GetCategoriesAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading categories: {ex.Message}");
        }
    }

    private async Task AddCategory()
    {
        if (!string.IsNullOrWhiteSpace(newCategoryName))
        {
            try
            {
                var newCategory = new Category { Name = newCategoryName };
                await CategoryService.AddCategoryAsync(newCategory);
                categories?.Add(newCategory);
                newCategoryName = string.Empty;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error adding category: {ex.Message}");
            }
        }
    }

    private async Task ConfirmDeleteCategory(int id)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this category?");
        if (confirmed)
        {
            try
            {
                await CategoryService.DeleteCategoryAsync(id);
                var category = categories?.FirstOrDefault(c => c.Id == id);
                if (category != null)
                {
                    categories.Remove(category);
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error deleting category: {ex.Message}");
            }
        }
    }
}
