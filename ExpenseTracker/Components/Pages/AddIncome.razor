@page "/incomes/new"
@using ExpenseTracker.Services
@rendermode InteractiveServer

@inject IncomeService IncomeService
@inject NavigationManager Navigation

<h3>Add New Income</h3>

<EditForm Model="newIncome" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="title" class="form-label">Title</label>
        <InputText id="title" class="form-control" @bind-Value="newIncome.Title" />
        <ValidationMessage For="@(() => newIncome.Title)" />
    </div>

    <div class="mb-3">
        <label for="date" class="form-label">Date</label>
        <InputDate id="date" class="form-control" @bind-Value="newIncome.Date" />
        <ValidationMessage For="@(() => newIncome.Date)" />
    </div>

    <div class="mb-3">
        <label for="amount" class="form-label">Amount</label>
        <InputNumber id="amount" class="form-control" @bind-Value="newIncome.Amount" />
        <ValidationMessage For="@(() => newIncome.Amount)" />
    </div>

    <div class="mb-3">
        <label for="type" class="form-label">Type</label>
        <InputSelect id="type" class="form-control" @bind-Value="newIncome.Type">
            @foreach (var type in Enum.GetValues(typeof(IncomeType)))
            {
                <option value="@type">@type</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => newIncome.Type)" />
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@code {
    private Income newIncome = new Income();

    protected override void OnInitialized()
    {
        newIncome.Date = DateOnly.FromDateTime(DateTime.Now); // Setați data curentă
    }

    private async Task HandleValidSubmit()
    {
        await IncomeService.AddIncomeAsync(newIncome);
        Navigation.NavigateTo("/incomes");
    }
}
